#Merge Sort
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2  
        left_half = arr[:mid]  
        right_half = arr[mid:]
        merge_sort(left_half)   
        merge_sort(right_half) 
        i = j = k = 0  
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1


#Remove Duplicates from sorted Array
class Solution(object):
    def removeDuplicates(self, nums):
        length=len(nums)
        if not nums:
            return 0;
        i=0
        for j in range(1,length):
            if nums[i]!=nums[j]:
                i+=1
                nums[i]=nums[j]
        return i+1

#Valid Mountain Array
class Solution(object):
    def validMountainArray(self, arr):
        n=len(arr)
        if n<3:
            return False
        i=0
        while i+1<n and arr[i]<arr[i+1]:
            i+=1
        if i==0 or i==n-1:
            return False
        while i+1<n and arr[i]>arr[i+1]:
            i+=1
        return i==n-1
