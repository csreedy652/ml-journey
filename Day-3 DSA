class Solution(object):
    def minSubArrayLen(self, target, nums):
        total=0
        left=0
        min_len = float('inf')
        for right in range(len(nums)):
            total+=nums[right]
            while total>=target:
                min_len = min(min_len, right - left + 1)
                total-=nums[left]
                left+=1
        return min_len if min_len != float('inf') else 0

class Solution(object):
    def longestOnes(self, nums, k):
        left=0
        max_length=0
        zeroes=0
        for right in range(len(nums)):
            if nums[right]==0:
                zeroes+=1
            while zeroes>k:
                if nums[left]==0:
                    zeroes -=1
                left+=1
            max_length=max(max_length, right-left+1)
        return max_length

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        seen=set()
        left=0
        max_length=0
        for right in range(len(s)):
            while s[right] in seen:
                seen.remove(s[left])
                left+=1
            seen.add(s[right])
            max_length=max(max_length,right-left+1)
        return max_length
        

