#valid paranthesis
class Solution(object):
    def isValid(self, s):
        stack=[]
        for i in range(len(s)):
            if(s[i]=='(' or s[i]=='[' or s[i]=='{'):
                stack.append(s[i])
            else:
                if not stack:
                    return False
                if(s[i]==')' and stack[-1]=='('):
                    stack.pop()
                elif(s[i]==']' and stack[-1]=='['):
                    stack.pop()
                elif(s[i]=='}' and stack[-1]=='{'):
                    stack.pop()
                else:
                    return False
        return not stack
#minimum stack
class MinStack(object):

    def __init__(self):
        self.stack = []
        self.min_stack = []
        

    def push(self, val):
        self.stack.append(val)
        if not self.min_stack or val<=self.min_stack[-1]:
            self.min_stack.append(val)
        

    def pop(self):
        if self.stack:
            if self.stack[-1]==self.min_stack[-1]:
                self.min_stack.pop()
            self.stack.pop()

    def top(self):
        if self.stack:
            return self.stack[-1]
        

    def getMin(self):
        if self.min_stack:
            return self.min_stack[-1]
#stack to queue
class MyQueue(object):

    def __init__(self):
        self.in_stack=[]
        self.out_stack=[]
        

    def push(self, x):
        self.in_stack.append(x)
        

    def pop(self):
        self.move_in_to_out()
        return self.out_stack.pop()


        

    def peek(self):
        self.move_in_to_out()
        return self.out_stack[-1]
        

    def empty(self):
        return not self.in_stack and not self.out_stack

        
    def move_in_to_out(self):
        if not self.out_stack:
            while self.in_stack:
                self.out_stack.append(self.in_stack.pop())



#hotter temparatures(monotonic stack)
class Solution(object):
    def dailyTemperatures(self, temperatures):
        n=len(temperatures)
        diff=[0]*n
        stack=[]
        for i in range(n):
            while stack and temperatures[i]>temperatures[stack[-1]]:
                prev_day=stack.pop()
                diff[prev_day]=i-prev_day
            stack.append(i)
        return diff
