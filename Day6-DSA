#Binary Search
class Solution(object):
    def search(self, nums, target):
        start=0
        end=len(nums)-1
        while start<=end:
            mid=start+(end-start)/2
            if nums[mid]==target:
                return mid
            elif nums[mid]>target:
                end=mid-1
            else:
                start=mid+1
        return -1

#Search Insert Position
class Solution(object):
    def searchInsert(self, nums, target):
        start=0
        end=len(nums)-1
        while start<=end:
            mid=start+(end-start)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]<target:
                start=mid+1
            else:
                end=mid-1
        return start

#search in rotated sorted array
class Solution(object):
    def search(self, nums, target):
        start = 0
        end = len(nums) - 1
        while start <= end:
            mid = start + (end - start) // 2

            if nums[mid] == target:
                return mid
            if nums[start] <= nums[mid]:
                if nums[start] <= target < nums[mid]:
                    end = mid - 1
                else:
                    start = mid + 1
            else:
                if nums[mid] < target <= nums[end]:
                    start = mid + 1
                else:
                    end = mid - 1

        return -1
#Find Minimum in Rotated Sorted Array
class Solution(object):
    def findMin(self, nums):
        start = 0
        end = len(nums) - 1

        while start < end:
            mid = (start + end) // 2
            if nums[mid] > nums[end]:
                start = mid + 1
            else:
                end = mid

        return nums[start]
